/* Old Phone Keypad
You are given an old phone with a keypad. Each key on the keypad has multiple letters assigned to it, which can be used to type messages.

These are the letters present on each key:

 [A,B,C]    [D,E,F]    [G,H,I]
   1         2         3

 [J,K,L]    [M,N,O]    [P,Q,R,S]  
   4         5          6

  [T,U]     [V,W,X]      [Y,Z]
    7         8          9

    [ ]       [ ]         [ ]
    *        0          #  

You are also provided with an integer array consisting of all the numbers that are pressed, in the same order. Each number can be pressed multiple times even if its mentioned only one time.

Explanation:

If 3 is given in the array this means corresponding letter can be [G,H,I]
Your task is to return the list of strings that can be generated by pressing the keys in the array by writing a recursive code.

NOTE: The buttons are pressed in given order i.e. first button at '0-th' index is pressed and then '1-st' and so on. The output should be in lexicographic order with only uppercase letters.

Input Format
First line contains the number of keys n pressed on the phone

Second line contains n space seprated integers that are pressed on the phone.

Output Format
Return a list of strings consisting of all the strings that can be generated by pressing those keys the the phone.

Example 1
Input

2
2 5
Output

DM DN DO EM EN EO FM FN FO*/ 
package RecursionArrayList;
import java.util.*;

class OldPhone {
    static void helper(int arr[],int idx,ArrayList<String> ans,String s)
    {
        if(idx>=arr.length)
        {ans.add(s);
        return;}
        
        

        int curr = arr[idx];
        if(curr == 1)
        {
            helper(arr,idx+1,ans,s+'A');
            helper(arr,idx+1,ans,s+'B');
            helper(arr,idx+1,ans,s+'C');

        }
        else if(curr == 2){
             helper(arr,idx+1,ans,s+'D');
            helper(arr,idx+1,ans,s+'E');
            helper(arr,idx+1,ans,s+'F');

        }
        else if(curr == 3)
        {
             helper(arr,idx+1,ans,s+'G');
            helper(arr,idx+1,ans,s+'H');
            helper(arr,idx+1,ans,s+'I');
        }
        else if(curr == 4)
        {
             helper(arr,idx+1,ans,s+'J');
            helper(arr,idx+1,ans,s+'K');
            helper(arr,idx+1,ans,s+'L');
        }
        else if(curr == 5)
        {
             helper(arr,idx+1,ans,s+'M');
            helper(arr,idx+1,ans,s+'N');
            helper(arr,idx+1,ans,s+'O');
        }
        else if(curr == 6)
        {
            helper(arr,idx+1,ans,s+'P');
            helper(arr,idx+1,ans,s+'Q');
            helper(arr,idx+1,ans,s+'R');
            helper(arr,idx+1,ans,s+'S');

        }
        else if(curr == 7)
        {
             helper(arr,idx+1,ans,s+'T');
            helper(arr,idx+1,ans,s+'U');
        }
        else if(curr == 8)
        {
             helper(arr,idx+1,ans,s+'V');
            helper(arr,idx+1,ans,s+'W');
            helper(arr,idx+1,ans,s+'X');
        }
        else if(curr == 9)
        {
             helper(arr,idx+1,ans,s+'Y');
            helper(arr,idx+1,ans,s+'Z');

        }
        
        


    }
    static ArrayList <String> OldPhone(int n, int[] keys){
		//Write your code here
        ArrayList<String> a = new ArrayList<>();
        helper(keys,0,a,"");
        return a;

    }
	
	public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] keys = new int[n];
        for(int i=0;i<n;++i){
            keys[i] = sc.nextInt();
        }
        ArrayList <String> ans=OldPhone(n,keys);
        for(String i:ans) System.out.print(i+" ");
    }
}


